TITLE: Programming patterns in sed
SUBTITLE: Opensource Bridge 2009
AUTHOR: Philip S Tellis
DATE: 2009-06-18
COMPANY: Yahoo! Inc
CONFERENCE: <a href="http://opensourcebridge.org/events/2009/">Opensource Bridge 2009</a> osb2009-0121
%
<code>$ whoami</code>
-------------------------------
[bg code_martial/1543735477_f302fdc3a3.jpg]
- Philip Tellis
- geek / opensource developer
- yahoo
- <a href="http://twitter.com/bluesmoon">@bluesmoon</a>
- <a href="http://bluesmoon.info/">http://bluesmoon.info/</a>
%
Stream EDiting
--------------
- First there was <code>ed</code>
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
<pre class="dark">
?
</pre>
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
- <code>ed</code> begat <code>g/re/p</code>
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
- <code>ed</code> begat <code>g/re/p</code> - which was <em>Awesome!!!!</em>
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
- <code>ed</code> begat <code>g/re/p</code> - which was <em>Awesome!!!!</em>
- but you couldn't really do <code>g/re/d</code>, <code>g/re/s</code> or <code>g/re/foobar</code>
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
- <code>ed</code> begat <code>g/re/p</code> - which was <em>Awesome!!!!</em>
- but you couldn't really do <code>g/re/d</code>, <code>g/re/s</code> or <code>g/re/foobar</code>
- So <code>ed</code> begat <code>sed</code> as well - <q>non-interactive</q>
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
- <code>ed</code> begat <code>g/re/p</code> - which was <em>Awesome!!!!</em>
- but you couldn't really do <code>g/re/d</code>, <code>g/re/s</code> or <code>g/re/foobar</code>
- So <code>ed</code> begat <code>sed</code> as well - <q>non-interactive</q>
- And the world was good...
%
Stream EDiting
--------------
- First there was <code>ed</code> - <q>interactive</q>
- <code>ed</code> begat <code>g/re/p</code> - which was <em>Awesome!!!!</em>
- but you couldn't really do <code>g/re/d</code>, <code>g/re/s</code> or <code>g/re/foobar</code>
- So <code>ed</code> begat <code>sed</code> as well - <q>non-interactive</q>
- And the world was good... even at 2400 baud
%
[class="alert"] Enough history, where be dem Patterns???
%
Prerequisites
-------------
- You should already know a little sed
- You should know how to RTFM when in doubt
%
Is it an editor or a programming language?
-------------------
[bg mamk/2377536817_4d0cd7d48a_b.jpg]
- Language to edit data (text) streams based on ed's command set
- [class="light"] No variables
- [class="light"] Primitive branching
- [class="light"] But it _is_ turing-complete
%
Is it an editor or a programming language?
-------------------
[bg mamk/2377536817_4d0cd7d48a_b.jpg]
- Language to edit data (text) streams based on ed's command set
- No variables
- [class="light"] Primitive branching
- [class="light"] But it _is_ turing-complete
%
Is it an editor or a programming language?
-------------------
[bg mamk/2377536817_4d0cd7d48a_b.jpg]
- Language to edit data (text) streams based on ed's command set
- No variables
- Primitive branching
- [class="light"] But it _is_ turing-complete
%
Is it an editor or a programming language?
-------------------
[bg mamk/2377536817_4d0cd7d48a_b.jpg]
- Language to edit data (text) streams based on ed's command set
- No variables
- Primitive branching
- But it _is_ turing-complete
%
[class="alert"] To write complex programs, all you need is <code>if</code> and <code>goto</code>
%
A structured programming language
-------------
[bg adobemac/2895835834_ed3930a823_b.jpg]
- Sequence
- Selection
- Iteration
- [class="light"] Variables
- [class="light"] File handling
- [class="light"] Debugging
%
A useful structured programming language
-------------
[bg adobemac/2895835834_ed3930a823_b.jpg]
- Sequence
- Selection
- Iteration
- Variables
- File handling
- Debugging
%
1. Sequence
-----------
[class="light alert"] sed scripts flow sequentially from top to bottom unless a branch is involved
%
1. Sequence
-----------
[class="alert"] sed scripts flow sequentially from top to bottom unless a branch is involved
%
2. Selection
------------
[bg kt/1118569929_d84e822d94_b.jpg]
- if some condition, do some thing
%
2. Selection - if some condition, do some thing
------------
[bg kt/1118569929_d84e822d94_b.jpg]
<pre class="dark">
   /pattern/ command
</pre>
%
2. Selection - if some condition, do some thing
------------
[bg kt/1118569929_d84e822d94_b.jpg]
<pre class="dark">
   /pattern/ command

   s/pattern/replace/
   t label

   s/pattern/replace/
   T label
</pre>
%
2. Selection
-----------
[bg kt/1118569929_d84e822d94_b.jpg]
<pre class="dark">
   /^hello/ s/^hello/hello world/

   3 p

   /^next\>/ {
      N
      s/\(.*\)\n\(.*\)/\2\n\1/
   }
</pre>
%
2. Selection - Sample input
------------
[bg kt/1118569929_d84e822d94_b.jpg]
<pre class="dark">
   hello
   my name is sed
   print this line out twice
   next line first
   this is line #5
</pre>
%
2. Selection - Sample input
------------
[bg kt/1118569929_d84e822d94_b.jpg]
<pre class="dark">
   hello world
   my name is sed
   print this line out twice
   print this line out twice
   this is line #5
   next line first
</pre>
%
2. Selection
-----------
[bg kt/1118569929_d84e822d94_b.jpg]
<pre class="dark">
   /^hello/ s/^hello/hello world/

   3 p

   /^next\>/ {
      N
      s/\(.*\)\n\(.*\)/\2\n\1/
   }
</pre>
%
2. Selection
------------
[class="alert"] For readability, use a condition followed by a code block:<br><code style="font-size: 0.7em; line-height:1em;">/condition/ {<br>   command1<br>   command2<br>   command3<br>}          </code>
%
3. Iteration/Loops
-----------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- Entry controlled loops
- Exit controlled loops
- Fixed counter iterations
- The <code>b</code>, <code>t</code> and <code>T</code> commands are used here
- We also use labels as branch targets
%
3a. Iteration - Entry controlled
---------------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- <code>while(condition) {...}</code> - loop executed 0 or more times
<pre class="dark">
   :loopstart
   /condition/ {
      command1
      command2
      command3
      b loopstart
   }
</pre>
%
3a. Iteration - Entry controlled
---------------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- <code>while(condition) {...}</code> - loop executed 0 or more times
<pre class="dark">
   :loopstart
   /==/ {
      s/==//
      r equals.txt
      b loopstart
   }
</pre>
%
3b. Iteration - Exit controlled
---------------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- <code>do {...} while(condition)</code> / <code>repeat {...} until(condition)</code> - loop executed 1 or more times
<pre class="dark">
   :loopstart
      command1
      command2
      command3
   /condition/ b loopstart
</pre>
%
3b. Iteration - Exit controlled
---------------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- <code>do {...} while(/==/)</code>
<pre class="dark">
   :loopstart
      r equals.txt
   /==/ b loopstart
</pre>
%
3b. Iteration - Exit controlled
---------------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- <code>do {...} while(/==/)</code>
<pre class="dark">
   :loopstart
      r equals.txt
      s/==//
   t loopstart
</pre>
%
3b. Iteration - Exit controlled
---------------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- <code>repeat {...} until(/==/)</code>
<pre class="dark">
   :loopstart
      r equals.txt
      s/==//
   T loopstart
</pre>
%
3c. Iteration - fixed counter
----------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
- <code>for(counter) {...}</code> - loop executed exactly <code>counter</code> times
- No math in sed
- This is harder and ugly
- We need to use the Hold space
%
3c. Iteration -fixed counter
---------------------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
<pre class="dark">
   # Print the current line 10 times:

   # 1. Grab the current line into the hold space
   h
   # 2. Replace the pattern space with x based on what we want to count to
   c \
xxxxxxxxxx
   # 3. Print the line as long as there are x left:
   :loopstart
      s/^x//
      T loopend
      x
      p
      x
   b loopstart
</pre>
%
3c. Iteration - fixed counter
-----------------
[bg bluesmoon/241327100_fbd21e8cef_b.jpg]
[class="alert"] Avoid fixed counter for loops in sed.  They can most often be replaced with an entry controlled loop over real data
%
4. Variable<strike>s</strike>
------------
- An area in memory that can store variable data while the program executes
- [class="light"] The Hold space
- [class="light"] Only one exists
- [class="light"] Theoretically no size limit
- [class="light"] Simulate multiple variables using delimiters, key-value pairs perhaps
- [class="light"] Anyone want to try JSON?
%
4. Variable<strike>s</strike>
------------
- An area in memory that can store variable data while the program executes
- The Hold space
- [class="light"] Only one exists
- [class="light"] Theoretically no size limit
- [class="light"] Simulate multiple variables using delimiters, key-value pairs perhaps
- [class="light"] Anyone want to try JSON?
%
4. Variable<strike>s</strike>
------------
- An area in memory that can store variable data while the program executes
- The Hold space
- Only one exists
- [class="light"] Theoretically no size limit
- [class="light"] Simulate multiple variables using delimiters, key-value pairs perhaps
- [class="light"] Anyone want to try JSON?
%
4. Variable<strike>s</strike>
------------
- An area in memory that can store variable data while the program executes
- The Hold space
- Only one exists
- Theoretically no size limit
- [class="light"] Simulate multiple variables using delimiters, key-value pairs perhaps
- [class="light"] Anyone want to try JSON?
%
4. Variable<strike>s</strike>
------------
- An area in memory that can store variable data while the program executes
- The Hold space
- Only one exists
- Theoretically no size limit
- Simulate multiple variables using delimiters, key-value pairs perhaps
- [class="light"] Anyone want to try JSON?
%
4. Variable<strike>s</strike>
------------
- An area in memory that can store variable data while the program executes
- The Hold space
- Only one exists
- Theoretically no size limit
- Simulate multiple variables using delimiters, key-value pairs perhaps
- Anyone want to try JSON?
%
4. Variable<strike>s</strike>
------------
<pre class="dark">
   # 1. Swap the hold and pattern space
   x
   # 2. Set the pattern space to the value of your variable
   #    using the s, c, i, a, g or G commands:
   s/$/\nfoo\n/
   G
   # 3. Swap the hold and pattern space again
   x
</pre>
%
4. Variable<strike>s</strike> - key/value pairs
------------
<pre class="dark">
  1 {
	x
	s/$/\nname:/
	G
	s/name:\n/name:/
	s/$/\n/
	x
  }

  <a href="variables1.sed">variables1.sed</a>
</pre>
%
5. Debugging
------------
- Two commands to make debugging possible
- <code>l</code>: print out current hold space in a visually unambiguous way
- <code>=</code>: print out the current input line number
- Use the <code>x</code> command to swap the pattern and hold space to examine the hold space
%
5. Debugging
------------
- At any point of execution, add this to dump everything:
<pre class="dark">
   =
   l
   x
   l
   x

   <a href="variables2.sed">variables2.sed</a>
</pre>
%
6. File handling
----------------
- Sed can read and write files a line at a time or in slurp mode
- <code>r/R</code> append the entire file or next line of the file to the pattern space
- <code>w/W</code> append the current pattern space/first line of the pattern space to the file
- Files are overwritten when the program starts, but appended during execution
%
6. File handling - example
-------------------------
- Input consists of name of city followed by people from there
- Split into three files for PDX, SFO and others
- <a href="file-split.sed">file-split.sed</a>
%
Gaming
------
- No language is considered complete until you can write games with it
- <a href="http://uuner.doslash.org/forfun/sedtris.sed">sedtris</a>
%
Photo Credits
-------------
[bg 25602112@N07/2539754489_a20454a273_o.jpg]
- Shouts to each photographer for these most excellent CC licensed photos:
   - <a href="http://flickr.com/photos/code_martial/1543735477/">http://flickr.com/photos/code\_martial/1543735477/</a>
   - <a href="http://www.flickr.com/photos/mamk/2377536817/">http://www.flickr.com/photos/mamk/2377536817/</a>
   - <a href="http://www.flickr.com/photos/adobemac/2895835834/">http://www.flickr.com/photos/adobemac/2895835834/</a>
   - <a href="http://www.flickr.com/photos/kt/1118569929/">http://www.flickr.com/photos/kt/1118569929/</a>
   - <a href="http://flickr.com/photos/25602112@N07/2539754489/">http://flickr.com/photos/25602112@N07/2539754489/</a>
%
Links
----
- Slides: <a href="http://bluesmoon.github.com/talks/programming-patterns-in-sed/">bluesmoon.github.com/talks/programming-patterns-in-sed</a>
- Detailed writeup: <a href="http://tech.bluesmoon.info/2008/09/programming-patterns-in-sed.html">tech.bluesmoon.info/2008/09/programming-patterns-in-sed.html</a>
%
[class="alert"] Thank you
